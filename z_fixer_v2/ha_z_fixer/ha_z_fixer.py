# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HAZFixer
                                 A QGIS plugin
 This plugin is for fixing vertices that missing Z value (GPKG data)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Lei Ding
        email                : lei.ding@headlandarchaeology.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import pyqtSignal, QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import QgsProject, QgsVectorLayer, QgsFeatureRequest, QgsExpression, edit, QgsMessageLog
from qgis.utils import iface
from qgis.gui import *
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtWidgets import QVBoxLayout, QLabel
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QDialog, QVBoxLayout, QLabel, QDialogButtonBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ha_z_fixer_dialog import HAZFixerDialog
import os.path


class HAZFixer:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HAZFixer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&HA-Z Fixer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HAZFixer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            pass

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ha_z_fixer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'HA-Z Fixer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&HA-Z Fixer'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.first_start == True:
            self.first_start = False
            self.dlg = HAZFixerDialog()

        # Show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Function detail:
            expression = QgsExpression('z_min($geometry) = 0 OR z_max($geometry) = 0')
            total_layers = len(iface.layerTreeView().selectedLayers())
            layer_count = 0
            bar = QProgressDialog()
            bar.show()
            bar.setRange(0, total_layers)
            bar.setValue(0)  # Start with progress 0

            closeButton = QPushButton("Close Progress")
            closeButton.clicked.connect(bar.close)
            bar.setCancelButton(closeButton)
            #for layer in iface.layerTreeView().selectedLayers():
            for layer_count, layer in enumerate(iface.layerTreeView().selectedLayers(), 1):
                with edit(layer):
                    request = QgsFeatureRequest(expression)
                    ids = [f.id() for f in layer.getFeatures(request)]
                    layer.selectByIds(ids)
                    
                    total_vertex_count = sum(len([v for v in geom.vertices()]) for geom in (feature.geometry() for feature in layer.getFeatures()))

                    # Initialize has_zero_z variable
                    has_zero_z = True

                    # Loop through all vertices
                    for _ in range(total_vertex_count):
                        # Reset has_zero_z flag for each iteration
                        has_zero_z = False
                        
                        # Iterate over selected features
                        for feature in layer.selectedFeatures():
                            geom = feature.geometry()
                            vertex_count = len([v for v in geom.vertices()])

                            for i in range(vertex_count):
                                vertex = geom.vertexAt(i)
                                if vertex.z() == 0.0:
                                    print(layer.name(), "Feature ID:", feature.id(), "Vertex ID:", i)
                                    closest_vertex = None
                                    closest_distance = float('inf')

                                    # Find the closest vertex within the same feature
                                    for j in range(vertex_count):
                                        other_vertex = geom.vertexAt(j)
                                        if other_vertex.z() != 0.0:
                                            distance = vertex.distance(other_vertex)
                                            if distance < closest_distance:
                                                closest_distance = distance
                                                closest_vertex = other_vertex

                                    # If a closest non-zero Z vertex is found, set the Z value
                                    if closest_vertex:
                                        vertex.setZ(closest_vertex.z())
                                        geom.moveVertex(vertex, i)

                            # Check if there are still vertices with zero Z values
                            has_zero_z = any(vertex.z() == 0.0 for vertex in geom.vertices())

                            # If there are still zero Z vertices, try getting Z value from closest feature
                            if has_zero_z:
                                closest_feature = None
                                closest_distance = float('inf')
                                for other_feature in layer.getFeatures():
                                    if other_feature.id() != feature.id():
                                        other_geom = other_feature.geometry()
                                        for other_vertex in other_geom.vertices():
                                            if other_vertex.z() != 0.0:
                                                distance = geom.distance(other_geom)
                                                if distance < closest_distance:
                                                    closest_distance = distance
                                                    closest_feature = other_feature

                                # If a closest feature with non-zero Z vertices is found, get Z value
                                if closest_feature:
                                    closest_geom = closest_feature.geometry()
                                    closest_vertex = min(closest_geom.vertices(), key=lambda v: geom.distance(closest_geom))
                                    for i, v in enumerate(geom.vertices()):
                                        if v.z() == 0.0:
                                            v.setZ(closest_vertex.z())
                                            geom.moveVertex(v, i)

                            # Update the feature geometry and layer
                            feature.setGeometry(geom)
                            layer.updateFeature(feature)
                        
                        # Check if all vertices have non-zero Z values
                        if not has_zero_z:
                            iface.messageBar().pushSuccess('Z Fixed:',f"All vertices with 0 z-value have been fixed in layer: {layer.name()}.")
                            #QMessageBox.information(None, "Z Fixer", f"All vertices with 0 z-value have been fixed in layer: {layer.name()}.")
                            break  # Exit the loop if all vertices have been fixed
                        elif _ == total_vertex_count - 1:
                            iface.messageBar().pushWarning('Z Fixer Failed:', f"None of the features have Z value in the layer: {layer.name()}.")
                            #QMessageBox.information(None, "Z Fixer", f"None of the features have Z value in the layer: {layer.name()}.")
                layer_count += 1
                bar.setValue(layer_count)
            #bar.close()

